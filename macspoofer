#!/bin/bash

source spoof
source port_analysis
source fonts

AIRPORT="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"

##################################################################################

#
# Prints a usage message
#
function usage() {
	echo -e "\t$(bold macspoof) [-s|--spoof [port] [MAC address]] [-p|--permanent [port]]"
	echo -e "\t	 [-o|--ouidspoof [port] <OUI identifier>] [-r|--report [port]]"
	echo -e "\t	 [-l|--list [d]] [-i|--identifier <query>]"
	echo -e "\t	 [-n|--network [port]] [-h|--help]"
}


#
# Prints a help message
#
function help() {
	bold "Name"
	echo -e "\t$ms\n"
	bold "Synopsis"

	usage

	bold  "Description"
	echo -e "\tThe $(bold macspoof) utility is used to spoof MAC addresses on systems running OS X.\n"
	echo -e "\tThe following options are available:\n"
	echo -e "\t$(bold '-s|--spoof')\t\tSpoofs the MAC address on the specified hardware port. If no port is specified,
				the MAC address will be spoofed on the Wi-Fi port (typically en0 or en1). If no
				MAC address is specified, then one will be randomly generated. The order of
				arguments is not optional. Note that changing MAC addresses requires root
				privileges.\n"
	echo -e "\t$(bold '-o|--ouidspoof')\t\tPerforms the same functions as the -s option, but takes as a required argument an
				OUID. That is, three bytes in hexadecimal form (xx:xx:xx). The remaining three
				bytes of the MAC will be randomly generated. The order of arguments is not optional.\n"
	echo -e "\t$(bold '-p|--permanent')\t\tResets the MAC address on the specified port to its permanent value.\n"
	echo -e "\t$(bold '-r|--report')\t\tPriints the burned in, or permanent, MAC address for the specified port, as well as
				the MAC address broadcast on the LAN. If no port is specified, the Wi-Fi port is
				defaulted to.\n"
	echo -e "\t$(bold '-l|--list')\t\tPrints a list of all the system's hardware ports. If the 'd' flag is set, a more
				detailed analysis of each port is printed.\n"
	echo -e "\t$(bold '-i|--identifier')\t\tPrints all OUIDs associated with the required search term.\n"
	echo -e "\t$(bold '-n|--network')\t\tShuts down the specified hardware port. If no port is specified, the Wi-Fi port is
				defaulted to. This may be necessary after changing the MAC address to reset the
				port.\n"
}

##################################################################################

# Exit code guide:
# 1: command line parsing failed
# 2: script execution failed
# 3: bad port passed as argument

###################################################################################

# Constants for optarg
OPT="OPT"
NONOPT="NONOPT"

#
# optarg is used to parse optional arguments for command line options.
# If the value passed is an option, then optarg returns "OPT". Otherwise,
# optarg returns "NONOPT".
#
# Usage: optarg <value>
#
function optarg() {
	# If no argument was passed, print error message and exit
	if [ $# -eq 0 -o -z "$1" ]; then
		echo "ERROR: No value passed"
		echo "Usage: optarg <value>"
		return 1
	fi

	if [ $(echo "$1" | cut -c 1) == '-' ]; then
		# value is an option
		echo $OPT
	else
		# value is not an option
		echo $NONOPT
	fi
}

BP_TMP="temp/_bad_port_output.tmp"

function bad_port() {
	touch $BP_TMP
	local output=
	local temp_port=$1
	port=$(check_port $temp_port)
	echo "$?" > $BP_TMP
	if [ $? -eq 3 ]; then
		output+="$temp_port is an invalid port...\n"
		output+="Defaulting to $port...\n"
	fi
	output+="$port"
	echo -e "$output" > $BP_TMP
	unset port
}


###################################################################################


# Print usage message and exit if no options were passed
[ $# -eq 0 ] && usage && exit 1

# Whether the airport utility was found
[ -f $AIRPORT ] && ap_found=true || ap_found=false

# Default hardware port
DEFAULT=$(wifi_port)

while [ $# -gt 0 ]; do
	case $1 in
		-s|--spoof)
			# If a port was specified
			if [ $# -gt 1 ]; then
				if_opt_stat=$(optarg $2)
				if [ $if_opt_stat == $OPT ]; then
					port=$DEFAULT
					shift 1
				else
					port=$2
					shift 2
					
					bad_port $port
					port=$(tail -1 $BP_TMP)
					#sed -i '' '$ d' $BP_TMP
					cat $BP_TMP
									
				fi
			else
				port=$DEFAULT
				shift 1
			fi
						
			# If a new MAC address was specified
			if [ $# -gt 0 ]; then
				add_opt_stat=$(optarg $1)
				if [ "$add_opt_stat" == "$OPT" ]; then
					mac_add=$(generate)
				else
					mac_add=$1
					shift 1
				fi
			else
				mac_add=$(generate)
			fi
			echo "spoofing $port to $mac_add";;

		########################################

		-o|--ouidspoof)
			# If a port was specified
			if [ $# -gt 1 ]; then
				if_opt_stat=$(optarg $2)
				if [ $if_opt_stat == $OPT ]; then
					port=$DEFAULT
					shift 1
				else
					port=$2
					shift 2

					temp_port=$port
					port=$(check_port $temp_port)
					if [ $? -eq 3 ]; then
						echo "$temp_port is an invalid port..."
						echo "Defaulting to $port..."
					fi
				fi
			else
				port=$DEFAULT
				shift 1
			fi
						
			# If an OUI was specified
			if [ $# -gt 0 ]; then
				oui_opt_stat=$(optarg $1)
				if [ "$oui_opt_stat" == "$OPT" ]; then
					oui=$(generate_with_ouid $1)
				else
					echo "No OUID provided"
					usage
					exit 1
				fi
			else
				echo "No OUID provided"
				usage
				exit 1
			fi
			echo "spoofing $port to $oui";;

		########################################

		-r|--report)
			if [ $# -gt 1 ]; then
				port_opt_stat=$(optarg $2)
				if [ "$port_opt_stat" == "$OPT" ]; then
					port=$DEFAULT
				else
					port=$2
					shift 1
				fi
			else
				port=$DEFAULT
			fi
			shift 1

			temp_port=$port
			port=$(check_port $temp_port)
			if [ $? -eq 3 ]; then
				echo "$temp_port is an invalid port..."
				echo "Defaulting to $port...\n"
			fi

			report $(check_port $port);;

		########################################

		-l|--list)
			if [ $# -gt 1 ]; then
				list_opt_stat=$(optarg $2)
				if [ "$list_opt_stat" == "$NONOPT" ]; then
					if [ "$2" == "d" ]; then
						port_list "d"
					else
						printf 'WARNING: Unknown option argument (ignored): %s\n' "$2" >&2
						port_list
					fi
					shift 1
					continue
				fi
			fi
			port_list
			shift 1;;

		########################################

		-p|--permanent)
			# If a port was specified
			if [ $# -gt 1 ]; then
				if_opt_stat=$(optarg $2)
				if [ $if_opt_stat == $OPT ]; then
					port=$DEFAULT
					shift 1
				else
					port=$2
					shift 2

					temp_port=$port
					port=$(check_port $temp_port)
					if [ $? -eq 3 ]; then
						echo "$temp_port is an invalid port..."
						echo "Defaulting to $port..."
					fi
				fi
			else
				port=$DEFAULT
				shift 1
			fi
			
			perm_add=$(networksetup -getmacaddress $port | cut -d ' ' -f 3)
			spoof $port $perm_add;;

		########################################

		-n|--network)
			if [ $ap_found == false ]; then
				echo "airport utility not found, unable to proceed"
				exit 2
			fi
			
			if [ $# -gt 1 ]; then
				net_opt_stat=$(optarg $2)
				if [ $net_opt_stat == $OPT ]; then
					port=$DEFAULT
					shift 1
				else
					port=$2
					shift 2

					temp_port=$port
					port=$(check_port $temp_port)
					if [ $? -eq 3 ]; then
						echo "$temp_port is an invalid port..."
						echo "Defaulting to $port..."
					fi
				fi
			else
				port=$DEFAULT
				shift 1
			fi
			
			airport -z
			networksetup -setairportpower $port off;;
		
		########################################

		-h|--help)
			help
			break;;
		
		########################################

		*)
			printf 'WARNING: Unknown option (ignored): %s\n' "$1" >&2
			shift 1;;
	esac
done
